#!/bin/bash --login

LIB_PATH=$( dirname $0 )/../lib/script
source $LIB_PATH/script_helper.sh

if [ ! -z $3 ]; then
  BUILD_ID=$3
else
  BUILD_ID=$( build_id )
fi


TMP_PATH=$TMP_PATH/$BUILD_ID

# make ourselves at home.
rm --recursive --force $TMP_PATH
mkdir --verbose --parent $TMP_PATH

# argument one: our entry point, index.html
INDEX_HTML=$( abs_path $1 )

# argument two: our project folder. defaults to current path
if [ ! -z $2 ]; then
  PROJECT_PATH=$( abs_path $2 )
else
  PROJECT_PATH=$( dirname $INDEX_HTML )
fi


# output package is our input html with a .nw output.
OUTPUT_PACKAGE_NAME=$TMP_PATH/$( basename $INDEX_HTML .html )-$BUILD_ID.nw


# ===== BUILD

  # copy assets into build folder.
  #cp --recursive --verbose --dereference --force $RES_PATH/nwjs/* $TMP_PATH/

  # copy user entry point into build folder.
  cp --recursive --verbose --dereference --force $INDEX_HTML $TMP_PATH/

  # copy user project into build folder.
  cp --recursive --verbose --dereference --force $PROJECT_PATH/* $TMP_PATH/

  # copy our libs, if any, into build folder.
  if [ ! -d $TMP_PATH/lib/ ]; then    mkdir --verbose --parent $TMP_PATH/lib;   fi
  cp --recursive --verbose --dereference --force $LIB_PATH/../* $TMP_PATH/lib/

  # copy our package.json in if the user has none.
  if [ ! -f $TMP_PATH/package.json ]; then
    cp --verbose --dereference $RES_PATH/build/default_package.json $TMP_PATH/package.json
  fi

# ===== PACKAGE IT!
  cd $TMP_PATH
  zip -9 -r -o -b $USER_PATH $OUTPUT_PACKAGE_NAME ./* 
  #cp --recursive --verbose --force $OUTPUT_PACKAGE_NAME $USER_PATH

# ===== SHIP IT!
  echo -e -n $BUILD_ID > $TMP_PATH/../.$( basename $INDEX_HTML .html ).recent_build
  cd $USER_PATH
  exit $EXITCODE_SUCCESS
